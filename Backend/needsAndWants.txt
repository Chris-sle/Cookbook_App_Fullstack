DB setup:
public.users
    Columns:
        id uuid NOT NULL DEFAULT gen_random_uuid()
        username varchar(150) NOT NULL
        email varchar(150) NOT NULL
        password varchar(150) NOT NULL
        is_admin boolean DEFAULT false
        status varchar(20) DEFAULT 'active'
        suspended_until timestamptz
        created_at timestamptz DEFAULT now()
    Primary key: id
    Indexes / constraints:
    UNIQUE(username)
    UNIQUE(email)
    Referenced by: favorites(user_id), recipes(author_id), recipe_click_logs(user_id), refresh_tokens(user_id)

public.recipes
    Columns:
        id uuid NOT NULL DEFAULT gen_random_uuid()
        title varchar(150) NOT NULL
        instructions text NOT NULL
        image_url text
        author_id uuid REFERENCES users(id)
        upvotes integer NOT NULL DEFAULT 0
        downvotes integer NOT NULL DEFAULT 0
        vote_score integer NOT NULL DEFAULT 0
        created_at timestamptz DEFAULT now()
    Primary key: id
    Referenced by: recipe_categories(recipe_id), recipe_click_logs(recipe_id), recipe_clicks(recipe_id), recipe_ingredients(recipe_id), recipe_votes(recipe_id), favorites(recipe_id)

public.ingredients
    Columns:
        id uuid NOT NULL DEFAULT gen_random_uuid()
        name varchar(100) NOT NULL
    Primary key: id
    Indexes:
        UNIQUE(name)
    Referenced by: recipe_ingredients(ingredient_id)

public.recipe_ingredients
    Columns:
        recipe_id uuid NOT NULL REFERENCES recipes(id) ON DELETE CASCADE
        ingredient_id uuid NOT NULL REFERENCES ingredients(id) ON DELETE CASCADE
        quantity varchar(50)
    Primary key: (recipe_id, ingredient_id)

public.categories
    Columns:
        id uuid NOT NULL DEFAULT gen_random_uuid()
        name text NOT NULL
    Primary key: id
    Indexes:
        UNIQUE(lower(name)) â€” case-insensitive unique index
        Referenced by: recipe_categories(category_id)

public.recipe_categories
    Columns:
        recipe_id uuid NOT NULL REFERENCES recipes(id) ON DELETE CASCADE
        category_id uuid NOT NULL REFERENCES categories(id) ON DELETE CASCADE
    Primary key: (recipe_id, category_id)

public.favorites
    Columns:
        user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE
        recipe_id uuid NOT NULL REFERENCES recipes(id) ON DELETE CASCADE
    Primary key: (user_id, recipe_id)

public.recipe_votes
    Columns:
        user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE
        recipe_id uuid NOT NULL REFERENCES recipes(id) ON DELETE CASCADE
        vote smallint NOT NULL CHECK (vote IN (1, -1))
        created_at timestamptz DEFAULT now()
        updated_at timestamptz DEFAULT now()
    Primary key: (user_id, recipe_id)

public.recipe_clicks
    Columns:
        recipe_id uuid PRIMARY KEY REFERENCES recipes(id) ON DELETE CASCADE
        clicks bigint NOT NULL DEFAULT 0

public.recipe_click_logs
    Columns:
        id bigserial PRIMARY KEY
        recipe_id uuid REFERENCES recipes(id) ON DELETE CASCADE
        user_id uuid REFERENCES users(id)
        created_at timestamptz DEFAULT now()

public.refresh_tokens
    Columns:
        id uuid PRIMARY KEY DEFAULT gen_random_uuid()
        user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE
        token text NOT NULL
        user_agent text
        ip text
        created_at timestamptz DEFAULT now()
        expires_at timestamptz NOT NULL
    Indexes:
        (considering an index on token for lookups)
---------------------------------------------------------------------------------------------------------------

API setup:
1. Authentication & Authorization Middleware. - Done
2. Basic CRUD Endpoints Users, Recipes. - Done
- Users (done)
- Recipes (done)
3. Favorites Management Endpoints - Done
4. Admin-only Endpoints (for moderation)
- admin View Users. 
- delete user. 
- admin ban.
- admin suspend.
- admin logistics.
- create new admins. 
(need too create the first admin in the db.) 
5. Error Handling & Validation
6. Rate Limiting & Security Best Practices
7. API Versioning & Documentation (Optional but Recommended)